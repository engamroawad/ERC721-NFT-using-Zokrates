// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var SquareVerifier = artifacts.require("./SquareVerifier.sol");
const fs = require('fs');
// Test verification with correct proof
// - use the contents from proof.json generated from zokrates steps
contract('TestSquareVerifier', accounts => {
    const account_one = accounts[0];
    const account_two = accounts[1];
    describe('match erc721 spec', function () {
        beforeEach(async function () {
            this.contract = await SquareVerifier.new({ from: account_one });
        })

        it('should verifiy proof ', async function () {
            proof = JSON.parse(fs.readFileSync("../zokrates/code/square/proof.json"))

            // Test verification with incorrect proof
            result=await this.contract.verifyTx(proof.proof ,proof.inputs);
            assert.equal(result, true, "incorrect proof");
        });

        it('another correct verifiy proof ', async function () {
            proof = JSON.parse(fs.readFileSync("../zokrates/code/square/proof_1.json"))

            // Test verification with incorrect proof
            result=await this.contract.verifyTx(proof.proof ,proof.inputs);
            assert.equal(result, true, "incorrect proof");
        });

        it('should verifiy incorrect proofs ', async function () {
            proof = JSON.parse(fs.readFileSync("../zokrates/code/square/proof_incorrect.json"))

            // Test verification with incorrect proof
            result=await this.contract.verifyTx(proof.proof ,proof.inputs);
            assert.equal(result, false, "incorrect proof not detected");
        });
    })

});
